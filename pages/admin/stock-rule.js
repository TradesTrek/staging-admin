import React, { Fragment, useEffect, useState } from "react";
import DashboardHeader from "../../components/header/DashboardHeader";
import SideBar from "../../components/side-bar/SideBar";
import Head from "next/head";
import { gameService } from "../../services/game.service";
import FormSpinner from "../../components/Spinners/FormSpinner";
import { toast, ToastContainer } from "react-toastify";

export default function StockRule() {
  const [limit, setLimit] = useState(0);
  const [isLoading, setIsLoading] = useState(false);
  const [isError, setIsError] = useState("");
  const [period, setPeriod] = useState("DAILY");

  useEffect(() => {
    GetAllRefferalRule();
  }, []);

  const GetAllRefferalRule = () => {
    setIsLoading(true);
    gameService
      .GetStockRule()
      .then((res) => {
        if (res.success) {
          setLimit(res.data.limit);
          setPeriod(res.data.period);
          setIsLoading(false);
        }
      })
      .catch((err) => {
        console.log("err", err);
        setIsLoading(false);
      });
  };

  const AddRefferalRule = (l, p) => {
    setIsLoading(true);
    gameService
      .AddStockRule(l, p)
      .then((res) => {
        if (res.success) {
          setLimit(res.data.limit);
          setPeriod(res.data.period);

          setIsLoading(false);
          toast.success(res.message, {
            position: toast.POSITION.TOP_RIGHT,
          });
        }
      })
      .catch((err) => {
        console.log("err", err);
        setIsLoading(false);
      });
  };

  const handleSubmit = () => {

    if (limit < 0 || limit == null) {
      return setIsError("Please Enter Valid Number");
    }
    setIsError("");
    AddRefferalRule(limit, period);
  };
  return (
    <>
      <Head>
        <title>Stock Rule</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Fragment>
        <SideBar />
        <div className="dashboard sideBarOpen">
          <DashboardHeader />
          <ToastContainer
            position="top-center"
            autoClose={5000}
            hideProgressBar={false}
            newestOnTop={false}
            closeOnClick
            rtl={false}
            pauseOnFocusLoss
            draggable
            pauseOnHover
          />
          <div className="contentWrapper centerForm">
            <div className="dashboard_content">
              <h1 className="dashboard__title">Stock Rule</h1>
              <div className="center--block ">
                <div className="small--block">
                  <div className="site--form">
                    <div className="form--item">
                      <label for="" className="form--label">
                        Stock Limit
                        {isError ? (
                          <p style={{ fontSize: "10px", color: "red" }}>
                            {isError}
                          </p>
                        ) : (
                          ""
                        )}
                      </label>
                      <div className="form--group">
                        <input
                          type="number"
                          placeholder="Enter Per"
                          className=""
                          onChange={(e) => {
                            if (e.target.value == null || e.target.value == '') {
                              setIsError("Please Enter Valid Number");
                            } else if (
                              e.target.value <= 10000 &&
                              e.target.value >= 0
                            ) {
                              setLimit(e.target.value);
                              setIsError('')
                            } else {
                              setIsError("Please Enter Valid Number");
                            }
                          }}
                          value={limit}
                        />
                      </div>
                    </div>
                    <div className="form--item">
                      <label className="form--label">Time Period</label>
                      <select
                        className="form--group"
                        value={period}
                        onChange={(e) => setPeriod(e.target.value)}
                      >
                        <option value="DAILY">DAILY</option>

                        <option value="MONTHLY">MONTHLY</option>
                        <option value="YEARLY">YEARLY</option>
                      </select>
                    </div>

                    <button
                      onClick={() => handleSubmit()}
                      className="btn shareBtn"
                      disabled={isLoading}
                    >
                      {isLoading ? <FormSpinner /> : "SAVE"}
                    </button>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </Fragment>
    </>
  );
}
