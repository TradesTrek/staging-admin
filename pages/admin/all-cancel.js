import Head from "next/head";
import Link from "next/link";
import React, { useEffect, useRef, useState } from "react";
import DashboardHeader from "../../components/header/DashboardHeader";

import SideBar from "../../components/side-bar/SideBar";

import moment from "moment";
import FormSpinner from "../../components/Spinners/FormSpinner";
import ReactPaginate from "react-paginate";
import { CSVLink } from "react-csv";
import { orderService } from "../../services/order.service";
import ExportExcel from "../../helpers/ExportExcel";
import ExportPdf from "../../helpers/ExportPdf";

export default function AllCancelOrder() {
  useEffect(() => {
    document.body.classList.remove("has--tabs");
  });

  const [allCancelOrder, setAllCancelOrder] = useState();

  const [isLoading, setIsLoading] = useState(false);
  const [totalPage, setTotalPage] = useState(0);
  const [currentPage, setCurrentPage] = useState(1);
  const [search, setSearch] = useState("");

  const [option, setOption] = useState({ createdAt: -1 });
  const [csvDownloading,setCsvDownloading]=useState(false)
  const [xlsxDownloading,setXlsxDownloading]=useState(false)
  const [pdfDownloading,setPdfDownloading]=useState(false)
  const allFadownloadCancelRef = useRef();
  const [downloadCancelData,setDownloadFadownloadCancelData]=useState([])
  const FadownloadCancelHeaders = [
    {
      label: "Order Id",
      key: "orderId",
    },
    {
      label: "Symbol",
      key: "symbol",
    },
    { label: "Purchase Price(₦)", key: "rate" },
    { label: "Volume", key: "quantity" },
    { label: "Username", key: "username" },
    { label: "Competition Name", key: "competitionName" },
    { label: "Order Date", key: "createdAt" },
  


   
  ];
  useEffect(() => {
    getCancelOrder(currentPage, search, option);
  }, [option]);
  const getCancelOrder = (page, str, op) => {
    setIsLoading(true);
    orderService
      .getAllCancelOrder(page, str, op)
      .then((res) => {
        if (res.success) {
          setAllCancelOrder(res.data);
          setTotalPage(res.totalPage);
        }
        setIsLoading(false);
      })
      .catch((err) => {
        setIsLoading(false);
        console.log(err);
      });
  };

  const handlePageClick = ({ selected }) => {
    setCurrentPage(selected + 1);
    getCancelOrder(selected + 1, search, option);
  };
  const handleSearch = (e) => {
    setSearch(e.target.value);
    setCurrentPage(1);
    getCancelOrder(1, e.target.value, option);
  };
 
  const downloadCancel = async (str) => {
    const { data } = await orderService.downloadCancelOrder(search, option);
    setDownloadFadownloadCancelData(data);
    if (str == "csv") {
      setTimeout(() => {
        allFadownloadCancelRef.current.link.click();
        setCsvDownloading(false);
      }, 1000);
    } else if (str == "xlsx") {
      ExportExcel(FadownloadCancelHeaders, data, "cancel");
      setXlsxDownloading(false);
    } else if (str == "pdf") {
      ExportPdf(FadownloadCancelHeaders, data, "cancel");
      setPdfDownloading(false);
    }
  };
  return (
    <>
      <Head>
        <title>All Cancel Order</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <SideBar />
      <div className="dashboard sideBarOpen">
        <DashboardHeader />
        <div className="contentWrapper">
          <div className="dashboard_content">
            <h1 className="dashboard__title">All Cancel Order</h1>
            <div className="btnLists manager">
              <ul>
                <li>
                  <form>
                    <input
                      type="text"
                      placeholder="Search by symbol, username and game name..."
                      onChange={(e) => handleSearch(e)}
                    />
                  </form>
                </li>
                <li>
            {csvDownloading ? (
              <Link href="javascript:void(0)">
                <a className="btn spinnerBtn">
                  <FormSpinner />
                </a>
              </Link>
            ) : (
              <Link href="javascript:void(0)">
                <a className="btn" onClick={() => {
                  setCsvDownloading(true)
                  downloadCancel("csv")}}>
                  Export as CSV
                </a>
              </Link>
            )}
               <CSVLink
              style={{ display: "none" }}
              ref={allFadownloadCancelRef}
              headers={FadownloadCancelHeaders}
              data={downloadCancelData}
            >
              Download me
            </CSVLink>
          </li>
          <li>
            {xlsxDownloading ? (
              <Link href="javascript:void(0)">
                <a className="btn spinnerBtn">
                  <FormSpinner />
                </a>
              </Link>
            ) : (
              <Link href="javascript:void(0)">
                <a className="btn" onClick={() => {
                  setXlsxDownloading(true)
                  downloadCancel("xlsx")
                }}>
                  Export as xlsx
                </a>
              </Link>
            )}

         
          </li>
          <li>
            {" "}
            {pdfDownloading ? (
              <Link href="javascript:void(0)">
                <a className="btn spinnerBtn">
                  <FormSpinner />
                </a>
              </Link>
            ) : (
              <Link href="javascript:void(0)">
                <a className="btn" onClick={() => {
                  setPdfDownloading(true)
                  downloadCancel("pdf")
                }}>
                  Export as PDF
                </a>
              </Link>
            )}
          </li>
              </ul>
            </div>
            <div className="table--layout">
              {isLoading ? (
                <FormSpinner />
              ) : (
                <table>
                  <thead>
                    <tr>
                      <th
                        style={{ width: "3rem" }}
                        className="sorting__disabled"
                      >
                        Sr. No
                      </th>
                      <th
                        className={
                          option.orderId == 1
                            ? "desc"
                            : option.orderId == -1
                            ? "asc"
                            : ""
                        }
                        style={{ cursor: "pointer" }}
                        onClick={() => {
                          setOption({
                            orderId: option.orderId == 1 ? -1 : 1,
                          });
                        }}
                      >
                        Order Id
                      </th>
                      <th
                        className={
                          option.symbol == 1
                            ? "desc"
                            : option.symbol == -1
                            ? "asc"
                            : ""
                        }
                        style={{ cursor: "pointer" }}
                        onClick={() => {
                          setOption({
                            symbol: option.symbol == 1 ? -1 : 1,
                          });
                        }}
                      >
                        Symbol
                      </th>
                      <th className={
                          option.rate == 1
                            ? "desc"
                            : option.rate == -1
                            ? "asc"
                            : ""
                        }
                        style={{ cursor: "pointer" }}
                        onClick={() => {
                          setOption({
                            rate: option.rate == 1 ? -1 : 1,
                          });
                        }}>Purchase Price (₦)</th>
                      <th   className={
                          option.quantity == 1
                            ? "desc"
                            : option.quantity == -1
                            ? "asc"
                            : ""
                        }
                        style={{ cursor: "pointer" }}
                        onClick={() => {
                          setOption({
                            quantity: option.quantity == 1 ? -1 : 1,
                          });
                        }}>Volume</th>
                      <th className={
                          option["user.username"] == 1
                            ? "desc"
                            : option["user.username"] == -1
                            ? "asc"
                            : ""
                        }
                        style={{ cursor: "pointer" }}
                        onClick={() => {
                          setOption({
                            ["user.username"]:
                              option["user.username"] == 1 ? -1 : 1,
                          });
                        }}>Username</th>

                      <th  className={
                          option["game.competitionName"] == 1
                            ? "desc"
                            : option["game.competitionName"] == -1
                            ? "asc"
                            : ""
                        }
                        style={{ cursor: "pointer" }}
                        onClick={() => {
                          setOption({
                            ["game.competitionName"]:
                              option["game.competitionName"] == 1 ? -1 : 1,
                          });
                        }}>Competition Name</th>
                      <th className={
                          option.createdAt == 1
                            ? "desc"
                            : option.createdAt == -1
                            ? "asc"
                            : ""
                        }
                        style={{ cursor: "pointer" }}
                        onClick={() => {
                          setOption({
                            createdAt: option.createdAt == 1 ? -1 : 1,
                          });
                        }}>Order Date</th>

                      {/* <th style={{ width: "4rem" }} className="sorting__disabled">
                      Actions
                    </th> */}
                    </tr>
                  </thead>
                  <tbody>
                    {allCancelOrder &&
                      allCancelOrder.length > 0 &&
                      allCancelOrder.map((item, i) => {
                        return (
                          <tr key={i}>
                            <td>
                              {/* <input type="checkbox" /> */}
                              {(currentPage - 1) * 10 + i + 1}
                            </td>
                            <td>{item?.orderId}</td>

                            <td>{item.symbol}</td>
                            <td>₦{item.rate?.toFixed(2)}</td>
                            <td>{item.quantity}</td>
                            <td>{item.user.username}</td>

                            <td>{item.game.competitionName}</td>

                            <td>{moment(item.createdAt).format("ll")}</td>
                            {/* item.packageDuration == "trial" && */}
                          </tr>
                        );
                      })}
                  </tbody>
                </table>
              )}
              <ReactPaginate
                previousLabel={"prev"}
                nextLabel={"next"}
                breakLabel={"..."}
                breakClassName={"break-me"}
                pageCount={totalPage}
                forcePage={currentPage - 1}
                marginPagesDisplayed={2}
                pageRangeDisplayed={1}
                onPageChange={handlePageClick}
                containerClassName={"pagination"}
                subContainerClassName={"pages pagination"}
                activeClassName={"active"}
              />
            </div>
          </div>
        </div>
      </div>
    </>
  );
}
