import React, { Fragment, useEffect, useState } from "react";
import DashboardHeader from "../../components/header/DashboardHeader";
import SideBar from "../../components/side-bar/SideBar";
import Head from "next/head";
import { gameService } from "../../services/game.service";
import FormSpinner from "../../components/Spinners/FormSpinner";
import { toast, ToastContainer } from "react-toastify";

export default function StockRule() {
  const [minutes, setMinutes] = useState(0);
  const [isLoading, setIsLoading] = useState(false);
  const [isError, setIsError] = useState("");
  const [period, setPeriod] = useState("DAILY");

  useEffect(() => {
    GetAllRefferalRule();
  }, []);

  const GetAllRefferalRule = () => {
    setIsLoading(true);
    gameService
      .GetNewsRule()
      .then((res) => {
        if (res.success) {
          setMinutes(res.data.minute);
          setIsLoading(false);
        }
      })
      .catch((err) => {
        console.log("err", err);
        setIsLoading(false);
      });
  };

  const AddNewsRule = (l) => {
    setIsLoading(true);
    gameService
      .AddNewsRule(l)
      .then((res) => {
        if (res.success) {
          setMinutes(res.data.minute);
          

          setIsLoading(false);
          toast.success(res.message, {
            position: toast.POSITION.TOP_RIGHT,
          });
        }
      })
      .catch((err) => {
        console.log("err", err);
        setIsLoading(false);
      });
  };

  const handleSubmit = () => {
    
    if (minutes < 0 || minutes == null) {
      return setIsError("Please Enter Valid Number");
    }
    setIsError("");
    AddNewsRule(minutes);
  };
  return (
    <>
      <Head>
        <title>News Rule</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Fragment>
        <SideBar />
        <div className="dashboard sideBarOpen">
          <DashboardHeader />
          <ToastContainer
            position="top-center"
            autoClose={5000}
            hideProgressBar={false}
            newestOnTop={false}
            closeOnClick
            rtl={false}
            pauseOnFocusLoss
            draggable
            pauseOnHover
          />
          <div className="contentWrapper">
            <div className="dashboard_content">
            <h1 className="dashboard__title">News Rule</h1>

              <div className="center--block Referral">
                <div className="small--block">
                  <div className="flexBox amtTitle block--title block--back--link mb--32">
                    <h1 className="font-20 textLeft">News Rules</h1>
                    {/* <h4 className="">â‚¦ {user?.user?.walletAmount?.toFixed(2)||0.00}</h4> */}
                  </div>

                  <div className="referEarn">
                    <div className="site--form">
                      <div className="form--item referalCode">
                        <label for="" className="form--label">
                         Api Call Intervel (Minutes) 
                          {isError ? (
                            <p style={{ fontSize: "10px", color: "red" }}>
                              {isError}
                            </p>
                          ) : (
                            ""
                          )}
                        </label>
                        <input
                          type="number"
                          placeholder="Enter Minutes(1-59)"
                          className="form--control"
                          onChange={(e) => {

                            if (e.target.value == null ||e.target.value=='') {
                              setIsError("Please Enter Valid Number");
                            } else if (
                              e.target.value <= 59 &&
                              e.target.value >= 0
                            ) {
                              setMinutes(e.target.value);
                              setIsError('')
                            } else {
                              setIsError("Please Enter Valid Numberss");
                            }
                          }}
                          value={minutes}
                        />
                        {/* <button
                  onClick={() => setShow(!show)}
                  type="button"
                  className="btn btn--orange"
                > */}

                        {/* {show?"HIDE":"SHOW"} */}
                        {/* </button> */}
                      </div>
                      {/* <div className="form--item referalCode">
                        <label className="form--label">Time Period</label>
                        <select
                          className="form--control"
                          value={period}
                          onChange={(e) => setPeriod(e.target.value)}
                        >
                          <option value="DAILY">DAILY</option>

                          <option value="MONTHLY">MONTHLY</option>
                          <option value="YEARLY">YEARLY</option>
                        </select>
                      </div> */}

                      <button
                        onClick={() => handleSubmit()}
                        className="btn shareBtn"
                        disabled={isLoading}
                      >
                        {isLoading ? <FormSpinner /> : "SAVE"}
                      </button>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </Fragment>
    </>
  );
}
