import Head from "next/head";
import Image from "next/image";
import Link from "next/link";
import React, { useEffect, useRef, useState } from "react";
import DashboardHeader from "../../components/header/DashboardHeader";

import SideBar from "../../components/side-bar/SideBar";
import { userService } from "../../services";
import { confirmAlert } from "react-confirm-alert";
import { toast } from "react-toastify";

import { subscriptionService } from "../../services/subscription.service";
import { gameService } from "../../services/game.service";
import AddGame from "../../components/game/AddGame";
import EditGame from "../../components/game/EditGame";
import { useRouter } from "next/router";
import ReactPaginate from "react-paginate";
import AddPriodicTimeGame from "../../components/game/AddPrioditTime";
import moment from "moment";
import FormSpinner from "../../components/Spinners/FormSpinner";
import { CSVLink } from "react-csv";
import ExportExcel from "../../helpers/ExportExcel";
import ExportPdf from "../../helpers/ExportPdf";

export default function AllRefferal() {
  useEffect(() => {
    document.body.classList.remove("has--tabs");
  });

  const [tableAction, setTableAction] = useState(false);
  const [filterAction, setFilterAction] = useState(false);
  const [addUserForm, setAddUserForm] = useState(false);
  const [isUserToggle, setIsUserToggle] = useState();
  const [games, setGames] = useState();
  const [editUserForm, setEditUserForm] = useState(false);
  const [addPriodicForm, setAddPriodicForm] = useState(false);

  const [userData, setUserData] = useState("");
  const [allPage, setAllPage] = useState(1);
  const [currentPage, setCurrentPage] = useState(1);
  const [searchgame, setSearchGame] = useState("");
  const [gameId, setGameId] = useState("");
  const [option, setOption] = useState({ createdAt: -1 });
  const [isLoading, setIsLoading] = useState(false);
  const [fileterOption, setFilterOption] = useState({});
  const [gameStatus, setGameStatus] = useState("All");
  const [redeem, setRedeem] = useState("All");
  const history = useRouter();
  const [csvDownloading,setCsvDownloading]=useState(false)
  const [xlsxDownloading,setXlsxDownloading]=useState(false)
  const [pdfDownloading,setPdfDownloading]=useState(false)
  const allRefferalRef = useRef();
  const [downloadRefferalData,setDownloadRefferalData]=useState([])
  const competitionHeaders = [
    {
      label: "Email",
      key: "email",
    },
    { label: "Joined", key: "joined" },
    { label: "Redeem", key: "redeem" },
    { label: "Refferal Code", key: "refferalCode" },
    { label: "Sender Username", key: "username" },
    { label: "Created Date", key: "createdAt" },
   
  ];
  useEffect(() => {
    getAllGame(1, searchgame, { option, fileterOption });
    setCurrentPage(1);
  }, [addUserForm, editUserForm, searchgame, option, fileterOption]);
  const getAllGame = (page, search, body) => {
    setIsLoading(true);
    gameService
      .getAllRefferal(page, search, body)
      .then((res) => {
        if (res.success) {
          setGames(res.data);
          setAllPage(res.totalPage);
        }
        setIsLoading(false);
      })
      .catch((err) => {
        setIsLoading(false);
        console.log(err);
      });
  };

  const handlePageClick = ({ selected }) => {
    setCurrentPage(selected + 1);
    getAllGame(selected + 1, searchgame, { option, fileterOption });
  };
  const handleFilterSubmit = () => {
    setCurrentPage(1);
    let tempdata = {};
    if (gameStatus == "All") {
    } else {
      tempdata.joined = gameStatus == "true" ? true : false;
    }
    if (redeem == "All") {
    } else {
      tempdata.redeem = redeem == "true" ? true : false;
    }

    setFilterOption(tempdata);
    setFilterAction(false);
  };
  const downloadRefferal = async (str) => {
   
    const { data } = await gameService.downloadAllRefferal(searchgame,{option,fileterOption});
    setDownloadRefferalData(data);
    if (str == "csv") {
      setTimeout(() => {
        allRefferalRef.current.link.click();
        setCsvDownloading(false);
      }, 1000);
    } else if (str == "xlsx") {
      ExportExcel(competitionHeaders, data, "refferal");
      setXlsxDownloading(false)
    } else if (str == "pdf") {
      ExportPdf(competitionHeaders, data, "refferal");
      setPdfDownloading(false)
    }
  };
  return (
    <>
      <Head>
        <title>Refferal Lists</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <SideBar />
      <div className="dashboard sideBarOpen">
        <DashboardHeader />
        <div className="contentWrapper">
          <div className="dashboard_content">
            <h1 className="dashboard__title">All Refferals</h1>

            {/* Filter and search box */}

            <div
              className="btnLists manager"
              onClick={() => setTableAction(false)}
            >
              <ul>
                <li>
                  <form>
                    <input
                      type="text"
                      placeholder="Search by Email and refferal code..."
                      onChange={(e) => setSearchGame(e.target.value)}
                    />
                  </form>
                </li>
                <li>
            {csvDownloading ? (
              <Link href="javascript:void(0)">
                <a className="btn spinnerBtn">
                  <FormSpinner />
                </a>
              </Link>
            ) : (
              <Link href="javascript:void(0)">
                <a className="btn" onClick={() => {
                  setCsvDownloading(true)
                  downloadRefferal("csv")}}>
                  Export as CSV
                </a>
              </Link>
            )}
               <CSVLink
              style={{ display: "none" }}
              ref={allRefferalRef}
              headers={competitionHeaders}
              data={downloadRefferalData}
            >
              Download me
            </CSVLink>
          </li>
          <li>
            {xlsxDownloading ? (
              <Link href="javascript:void(0)">
                <a className="btn spinnerBtn">
                  <FormSpinner />
                </a>
              </Link>
            ) : (
              <Link href="javascript:void(0)">
                <a className="btn" onClick={() => {
                  setXlsxDownloading(true)
                  downloadRefferal("xlsx")
                }}>
                  Export as xlsx
                </a>
              </Link>
            )}

         
          </li>
          <li>
            {" "}
            {pdfDownloading ? (
              <Link href="javascript:void(0)">
                <a className="btn spinnerBtn">
                  <FormSpinner />
                </a>
              </Link>
            ) : (
              <Link href="javascript:void(0)">
                <a className="btn" onClick={() => {
                  setPdfDownloading(true)
                  downloadRefferal("pdf")
                }}>
                  Export as PDF
                </a>
              </Link>
            )}
          </li>
                <div className=" addButton1">
                  <span
                    className="filter--options"
                    onClick={() => setFilterAction(!filterAction)}
                  >
                    Filter
                  </span>

                  {/* <li
                    className="filter--options"
                    title="Filter"
                    onClick={() => setFilterAction(!filterAction)}
                  >
                    Filter
                  </li> */}
                </div>
              </ul>
            </div>
            {/* Filter Options Form */}
            <div
              onClick={() => setTableAction(false)}
              className={
                filterAction
                  ? "filter__actions filter__smooth"
                  : "filter__actions"
              }
            >
              <div className="filter__title">Filter</div>
              <div
                className="filter__close"
                onClick={() => setFilterAction(!filterAction)}
              >
                X
              </div>
              <form>
                <div className="form--item">
                  <label className="form--label">Joined User</label>
                  <select
                    className="form--control"
                    value={gameStatus}
                    onChange={(e) => setGameStatus(e.target.value)}
                  >
                    <option value="All">All</option>

                    <option value={true}>Yes</option>
                    <option value={false}>No</option>
                  </select>
                </div>
                <div className="form--item">
                  <label className="form--label">Redeem User</label>
                  <select
                    className="form--control"
                    value={redeem}
                    onChange={(e) => setRedeem(e.target.value)}
                  >
                    <option value="All">All</option>

                    <option value={true}>Yes</option>
                    <option value={false}>No</option>
                  </select>
                </div>

                <div onClick={handleFilterSubmit}>
                  <span
                    style={{
                      border: "1px solid #004577",
                      padding: "8px 23px",
                      borderRadius: "3px",
                      cursor: "pointer",
                    }}
                  >
                    Submit
                  </span>
                </div>
                {/* <div className="form--item">
                  <label className="form--label">Lock Status</label>
                  <select className="form--control">
                    <option>Assigned Locks</option>
                    <option>Active Locks</option>
                    <option>In Active Locks</option>
                  </select>
                </div> */}
              </form>
            </div>

            {/* Add Lock Form */}
            {addUserForm && <div className="layout--overlay--bg"></div>}
            <div
              className={
                addUserForm ? "form--layout form--active" : "form--layout"
              }
            >
              <div
                className="form__close"
                onClick={() => setAddUserForm(!addUserForm)}
              >
                X
              </div>
              {addUserForm && <AddGame addUserCloseModal={addUserCloseModal} />}
            </div>

            {/* add priodic  */}

            {addPriodicForm && <div className="layout--overlay--bg"></div>}
            <div
              className={
                addPriodicForm ? "form--layout form--active" : "form--layout"
              }
            >
              <div
                className="form__close"
                onClick={() => setAddPriodicForm(!addPriodicForm)}
              >
                X
              </div>
              {addPriodicForm && (
                <AddPriodicTimeGame
                  id={gameId}
                  addUserCloseModal={addPriodicCloseModal}
                />
              )}
            </div>

            {/* Edit lock Form ........ */}
            {/* edit page ..............  */}
            {editUserForm && <div className="layout--overlay--bg"></div>}
            <div
              className={
                editUserForm ? "form--layout form--active" : "form--layout"
              }
            >
              <div
                className="form__close"
                onClick={() => setEditUserForm(!editUserForm)}
              >
                X
              </div>
              {editUserForm && (
                <EditGame
                  data={userData}
                  editUserCloseModal={editUserCloseModal}
                />
              )}
            </div>

            <div className="table--layout">
              {isLoading ? (
                <FormSpinner />
              ) : (
                <table>
                  <thead onClick={() => setTableAction(false)}>
                    <tr>
                      <th
                        style={{ width: "3rem" }}
                        className="sorting__disabled"
                      >
                        {/* <input type="checkbox" name="select--all" /> */}
                        Sr. No
                      </th>
                      <th
                        className={
                          option.email == 1
                            ? "desc"
                            : option.email == -1
                            ? "asc"
                            : ""
                        }
                        style={{ cursor: "pointer" }}
                        onClick={() => {
                          setOption({
                            email: option.email == 1 ? -1 : 1,
                          });
                          setTableAction(false);
                        }}
                      >
                        Email
                      </th>
                      <th
                        className={
                          option.refferalCode == 1
                            ? "desc"
                            : option.refferalCode == -1
                            ? "asc"
                            : ""
                        }
                        style={{ cursor: "pointer" }}
                        onClick={() => {
                          setOption({
                            refferalCode: option.refferalCode == 1 ? -1 : 1,
                          });
                          setTableAction(false);
                        }}
                      >
                        Refferal Code
                      </th>
                      <th
                        className={
                          option.joined == 1
                            ? "desc"
                            : option.joined == -1
                            ? "asc"
                            : ""
                        }
                        style={{ cursor: "pointer" }}
                        onClick={() => {
                          setOption({
                            joined: option.joined == 1 ? -1 : 1,
                          });
                          setTableAction(false);
                        }}
                      >
                        Join
                      </th>
                      <th
                        className={
                          option.redeem == 1
                            ? "desc"
                            : option.redeem == -1
                            ? "asc"
                            : ""
                        }
                        style={{ cursor: "pointer" }}
                        onClick={() => {
                          setOption({
                            redeem: option.redeem == 1 ? -1 : 1,
                          });
                          setTableAction(false);
                        }}
                      >
                        Redeem
                      </th>

                      <th
                        className={
                          option["userId.username"] == 1
                            ? "desc"
                            : option["userId.username"] == -1
                            ? "asc"
                            : ""
                        }
                        style={{ cursor: "pointer" }}
                        onClick={() => {
                          setOption({
                            ["userId.username"]:
                              option["userId.username"] == 1 ? -1 : 1,
                          });
                          setTableAction(false);
                        }}
                      >
                        Sender Username
                      </th>
                      <th  className={
                          option.createdAt == 1
                            ? "desc"
                            : option.createdAt == -1
                            ? "asc"
                            : ""
                        }
                        style={{ cursor: "pointer" }}
                        onClick={() => {
                          setOption({
                            createdAt: option.createdAt == 1 ? -1 : 1,
                          });
                          setTableAction(false);
                        }}>Created Date</th>
                    </tr>
                  </thead>
                  <tbody>
                    {games &&
                      games.length > 0 &&
                      games.map((item, i) => {
                        return (
                          <tr key={i}>
                            <td onClick={() => setTableAction(false)}>
                              {(currentPage - 1) * 10 + 1 + i}
                              {/* <input type="checkbox" /> */}
                            </td>
                            <td onClick={() => setTableAction(false)}>
                              {item?.email}
                            </td>
                            <td onClick={() => setTableAction(false)}>
                              <b>{item?.refferalCode}</b>
                            </td>

                            <td onClick={() => setTableAction(false)}>
                              {item?.joined ? "Yes" : "No"}
                            </td>

                            <td onClick={() => setTableAction(false)}>
                              {item?.redeem ? "Yes" : "No"}
                            </td>

                            <td onClick={() => setTableAction(false)}>
                              {item?.userId?.username}
                            </td>
                            <td onClick={() => setTableAction(false)}>
                              {moment(item.createdAt).format("lll")}
                            </td>

                            {/* {(item?.users?.length==0 && item?.creatorType=='Admin') &&  */}

                            {/* } */}
                          </tr>
                        );
                      })}
                  </tbody>
                </table>
              )}
              <ReactPaginate
                previousLabel={"prev"}
                nextLabel={"next"}
                breakLabel={"..."}
                breakClassName={"break-me"}
                pageCount={allPage}
                forcePage={currentPage - 1}
                marginPagesDisplayed={2}
                pageRangeDisplayed={5}
                onPageChange={handlePageClick}
                containerClassName={"pagination"}
                subContainerClassName={"pages pagination"}
                activeClassName={"active"}
              />
            </div>
          </div>
        </div>
      </div>
    </>
  );
}
