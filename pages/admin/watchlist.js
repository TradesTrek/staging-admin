import Head from "next/head";
import Image from "next/image";
import Link from "next/link";
import React, { useEffect, useRef, useState } from "react";
import DashboardHeader from "../../components/header/DashboardHeader";
import AddHoliday from "../../components/holiday/AddHoliday";
import EditHoliday from "../../components/holiday/EditHoliday";
import SideBar from "../../components/side-bar/SideBar";
import { userService } from "../../services";
import { confirmAlert } from "react-confirm-alert";
import { toast } from "react-toastify";
import moment from "moment";
import FormSpinner from "../../components/Spinners/FormSpinner";
import ReactPaginate from "react-paginate";
import { CSVLink } from "react-csv";
import ExportExcel from "../../helpers/ExportExcel";
import ExportPdf from "../../helpers/ExportPdf";

export default function AllUsers() {
  useEffect(() => {
    document.body.classList.remove("has--tabs");
  });

  const [tableAction, setTableAction] = useState(false);
  const [filterAction, setFilterAction] = useState(false);
  const [addUserForm, setAddUserForm] = useState(false);
  const [isUserToggle, setIsUserToggle] = useState();
  const [holiday, setHoliday] = useState();
  const [editUserForm, setEditUserForm] = useState(false);
  const [userData, setUserData] = useState("");
  const [option, setOption] = useState({ createdAt: -1 });
  const [isLoading, setIsLoading] = useState(false);
  const [currentPage, setCurrentPage] = useState(1);
  const [totalPage, setTotalPage] = useState(1);
  const [search, setSearch] = useState("");
  const [csvDownloading, setCsvDownloading] = useState(false);
  const [xlsxDownloading, setXlsxDownloading] = useState(false);
  const [pdfDownloading, setPdfDownloading] = useState(false);
  const allHolidayRef = useRef();
  const [downloadHolidayData, setDownloadHolidayData] = useState([]);


  const HolidayHeaders = [
    {
      label: "Email",
      key: "email",
    },
    { label: "Stock Symbol", key: "stockSymbol" },
    { label: "Stock Name:", key: "stockName" },
    { label: "Created Date", key: "createdAt" },
  ];

  useEffect(() => {
    getHoliday(search, currentPage, option);
  }, [search, option]);
  const getHoliday = (search, page, data) => {
    setIsLoading(true);
    userService
      .getUserWatchList(search, page, data)
      .then((res) => {
        if (res.success) {
          setHoliday(res.data?.docs);
          setTotalPage(res.data.pages);
        }
        setIsLoading(false);
      })
      .catch((err) => {
        setIsLoading(false);
        console.log(err);
      });
  };

  const addUserCloseModal = () => {
    setAddUserForm(false);
    getHoliday(search, option, currentPage);
  };

  const handleSearch = (e) => {
    setSearch(e.target.value);
    setCurrentPage(1);
  };
  const handlePageClick = ({ selected }) => {
    setCurrentPage(selected + 1);
    getHoliday(search, option, selected + 1);
  };
  const downloadHoliday = async (str) => {
    const { data } = await userService.downloadHoliday(search, option);
    setDownloadHolidayData(data);
    if (str == "csv") {
      setTimeout(() => {
        allHolidayRef.current.link.click();
        setCsvDownloading(false);
      }, 1000);
    } else if (str == "xlsx") {
      ExportExcel(HolidayHeaders, data, "holiday");
      setXlsxDownloading(false);
    } else if (str == "pdf") {
      ExportPdf(HolidayHeaders, data, "holiday");
      setPdfDownloading(false);
    }
  };
  return (
    <>
      <Head>
        <title>WatchLists</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <SideBar />
      <div className="dashboard sideBarOpen">
        <DashboardHeader />
        <div className="contentWrapper">
          <div className="dashboard_content">
            <h1 className="dashboard__title">All Watchlist</h1>

            {/* Filter and search box */}

            <div onClick={() => setTableAction(false)} className="btnLists">
              <ul>
                <li>
                  <form>
                    <input
                      type="text"
                      placeholder="Search by  stock name..."
                      onChange={(e) => handleSearch(e)}
                    />
                  </form>
                </li>
                <li>
                  {csvDownloading ? (
                    <Link href="javascript:void(0)">
                      <a className="btn spinnerBtn">
                        <FormSpinner />
                      </a>
                    </Link>
                  ) : (
                    <Link href="javascript:void(0)">
                      <a
                        className="btn"
                        onClick={() => {
                          setCsvDownloading(true);
                          downloadHoliday("csv");
                        }}
                      >
                        Export as CSV
                      </a>
                    </Link>
                  )}
                  <CSVLink
                    style={{ display: "none" }}
                    ref={allHolidayRef}
                    headers={HolidayHeaders}
                    data={downloadHolidayData}
                  >
                    Download me
                  </CSVLink>
                </li>
                <li>
                  {xlsxDownloading ? (
                    <Link href="javascript:void(0)">
                      <a className="btn spinnerBtn">
                        <FormSpinner />
                      </a>
                    </Link>
                  ) : (
                    <Link href="javascript:void(0)">
                      <a
                        className="btn"
                        onClick={() => {
                          setXlsxDownloading(true);
                          downloadHoliday("xlsx");
                        }}
                      >
                        Export as xlsx
                      </a>
                    </Link>
                  )}
                </li>
                <li>
                  {" "}
                  {pdfDownloading ? (
                    <Link href="javascript:void(0)">
                      <a className="btn spinnerBtn">
                        <FormSpinner />
                      </a>
                    </Link>
                  ) : (
                    <Link href="javascript:void(0)">
                      <a
                        className="btn"
                        onClick={() => {
                          setPdfDownloading(true);
                          downloadHoliday("pdf");
                        }}
                      >
                        Export as PDF
                      </a>
                    </Link>
                  )}
                </li>

                {/* <li>
                  <form>
                    <input type="text" placeholder="Search by User Name..." />
                  </form>
                </li> */}
              </ul>
            </div>

            {/* Filter Options Form */}
            <div
              onClick={() => setTableAction(false)}
              className={
                filterAction
                  ? "filter__actions filter__smooth"
                  : "filter__actions"
              }
            >
              <div className="filter__title">Filter</div>
              <div
                className="filter__close"
                onClick={() => setFilterAction(!filterAction)}
              >
                X
              </div>
              <form>
                <div className="form--item">
                  <label className="form--label">Lock Brand Name</label>
                  <select className="form--control">
                    <option>Brand 1</option>
                    <option>Brand 2</option>
                  </select>
                </div>
                <div className="form--item">
                  <label className="form--label">Comapny Name</label>
                  <select className="form--control">
                    <optgroup label="Dubai">
                      <option>Company 1</option>
                      <option>Company 2</option>
                      <option>Company 3</option>
                      <option>Company 4</option>
                    </optgroup>
                    <optgroup label="UAE">
                      <option>Company 1</option>
                      <option>Company 2</option>
                      <option>Company 3</option>
                      <option>Company 4</option>
                    </optgroup>
                  </select>
                </div>
                {/* <div className="form--item">
                  <label className="form--label">Lock Status</label>
                  <select className="form--control">
                    <option>Assigned Locks</option>
                    <option>Active Locks</option>
                    <option>In Active Locks</option>
                  </select>
                </div> */}
              </form>
            </div>

            {/* Add Lock Form */}
            {addUserForm && <div className="layout--overlay--bg"></div>}
            <div
              className={
                addUserForm ? "form--layout form--active" : "form--layout"
              }
            >
              <div
                className="form__close"
                onClick={() => setAddUserForm(!addUserForm)}
              >
                X
              </div>
              {addUserForm && (
                <AddHoliday addUserCloseModal={addUserCloseModal} />
              )}
            </div>

            <div className="table--layout">
              {isLoading ? (
                <FormSpinner />
              ) : (
                <table>
                  <thead>
                    <tr>
                      <th
                        onClick={() => setTableAction(false)}
                        style={{ width: "3rem" }}
                        className="sorting__disabled"
                      >
                        {/* <input type="checkbox" name="select--all" /> */}
                        Sr. No
                      </th>
                      <th
                        className={
                          option.email == 1
                            ? "desc"
                            : option.email == -1
                            ? "asc"
                            : ""
                        }
                        style={{ cursor: "pointer" }}
                        onClick={() => {
                          setOption({
                            email: option.email == 1 ? -1 : 1,
                          });
                          setTableAction(false);
                        }}
                      >
                        Email
                      </th>
                      <th
                        className={
                          option.stockName == 1
                            ? "desc"
                            : option.stockName == -1
                            ? "asc"
                            : ""
                        }
                        style={{ cursor: "pointer" }}
                        onClick={() => {
                          setOption({
                            stockName: option.stockName == 1 ? -1 : 1,
                          });
                          setTableAction(false);
                        }}
                      >
                        Stock Name
                      </th>

                      <th
                        className={
                          option.createdAt == 1
                            ? "desc"
                            : option.createdAt == -1
                            ? "asc"
                            : ""
                        }
                        style={{ cursor: "pointer" }}
                        onClick={() => {
                          setOption({
                            createdAt: option.createdAt == 1 ? -1 : 1,
                          });
                          setTableAction(false);
                        }}
                      >
                        Created Date
                      </th>

                      <th
                        onClick={() => setTableAction(false)}
                        style={{ width: "4rem" }}
                        className="sorting__disabled"
                      ></th>
                    </tr>
                  </thead>
                  <tbody>
                    {holiday &&
                      holiday.length > 0 &&
                      holiday.map((item, i) => {
                        return (
                          <tr key={i}>
                            <td onClick={() => setTableAction(false)}>
                              {i + 1}
                              {/* <input type="checkbox" /> */}
                            </td>
                            <td onClick={() => setTableAction(false)}>
                              {item.email}
                            </td>
                            <td onClick={() => setTableAction(false)}>
                              {item.stockName}
                            </td>

                            <td onClick={() => setTableAction(false)}>
                              {moment(item.createdAt).format("lll")}
                            </td>

                            <td></td>
                          </tr>
                        );
                      })}
                  </tbody>
                </table>
              )}
              <ReactPaginate
                previousLabel={"prev"}
                nextLabel={"next"}
                breakLabel={"..."}
                breakClassName={"break-me"}
                pageCount={totalPage}
                forcePage={currentPage - 1}
                marginPagesDisplayed={2}
                pageRangeDisplayed={1}
                onPageChange={handlePageClick}
                containerClassName={"pagination"}
                subContainerClassName={"pages pagination"}
                activeClassName={"active"}
              />
            </div>
          </div>
        </div>
      </div>
    </>
  );
}
