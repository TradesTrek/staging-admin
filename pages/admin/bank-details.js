import Head from "next/head";

import React, { useEffect, useRef, useState } from "react";
import DashboardHeader from "../../components/header/DashboardHeader";

import SideBar from "../../components/side-bar/SideBar";
import { userService } from "../../services";
import { toast, ToastContainer } from "react-toastify";
import moment from "moment";
import FormSpinner from "../../components/Spinners/FormSpinner";
import ReactPaginate from "react-paginate";
import { confirmAlert } from "react-confirm-alert";
import Modal from "react-modal";
import Link from "next/link";
import { CSVLink } from "react-csv";
import ExportExcel from "../../helpers/ExportExcel";
import ExportPdf from "../../helpers/ExportPdf";
export default function BankDetails() {
  useEffect(() => {
    document.body.classList.remove("has--tabs");
  });

  const [filterAction, setFilterAction] = useState(false);

  const [transactionList, setTransactionList] = useState();

  const [option, setOption] = useState({ createdAt: -1 });
  const [isLoading, setIsLoading] = useState(false);
  const [currentPage, setCurrentPage] = useState(1);
  const [totalPage, setTotalPage] = useState(0);
  const [reason, setReason] = useState("");
  const [error, setError] = useState("");
  const [modelOpened, setModelOpened] = useState(false);
  const [action, setAction] = useState("");
  const [selectId, setSelectId] = useState("");
  const [search, setSearch] = useState("");
  const [csvDownloading, setCsvDownloading] = useState(false);
  const [xlsxDownloading, setXlsxDownloading] = useState(false);
  const [pdfDownloading, setPdfDownloading] = useState(false);
  const allTransactionRef = useRef();
  const [downloadTransactionData, setDownloadTransactionData] = useState([]);
  const TransactionHeaders = [
    {
      label: "Account Name",
      key: "accountName",
    },
    { label: "Account Number", key: "accountNumber" },
    { label: "Bank Name", key: "bankName" },
    { label: "Username", key: "username" },
    { label: "Created At", key: "createdAt" },
  ];
  useEffect(() => {
    getTransaction(option, 1, search);
    setCurrentPage(1);
  }, [option, search]);
  const getTransaction = (data, page, search) => {
    setIsLoading(true);
    userService
      .getAllBank(data, page, search)
      .then((res) => {
        if (res.success) {
          setTransactionList(res.data);
          setTotalPage(res.totalPage);
        }
        setIsLoading(false);
      })
      .catch((err) => {
        setIsLoading(false);
        console.log(err);
      });
  };
  

  const handlePageClick = ({ selected }) => {
    setCurrentPage(selected + 1);
    getTransaction(option, selected + 1, search);
  };
  const downloadTransaction = async (str) => {
    const { data } = await userService.downloadAllBankDetails(search, option);
    setDownloadTransactionData(data);
    if (str == "csv") {
      setTimeout(() => {
        allTransactionRef.current.link.click();
        setCsvDownloading(false);
      }, 1000);
    } else if (str == "xlsx") {
      ExportExcel(TransactionHeaders, data, "transaction");
      setXlsxDownloading(false);
    } else if (str == "pdf") {
      ExportPdf(TransactionHeaders, data, "transaction");
      setPdfDownloading(false);
    }
  };
  return (
    <>
      <Head>
        <title>User Bank Details</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <SideBar />

    
      <div className="dashboard sideBarOpen">
        <DashboardHeader />
        <div className="contentWrapper">
          <div className="dashboard_content">
            <h1 className="dashboard__title">Bank Details</h1>
            <div className="btnLists manager">
              <ul>
                <li>
                  <form>
                    <input
                      type="text"
                      placeholder="Search ..."
                      onChange={(e) => setSearch(e.target.value)}
                    />
                  </form>
                </li>
                <li>
                  {csvDownloading ? (
                    <Link href="javascript:void(0)">
                      <a className="btn spinnerBtn">
                        <FormSpinner />
                      </a>
                    </Link>
                  ) : (
                    <Link href="javascript:void(0)">
                      <a
                        className="btn"
                        onClick={() => {
                          setCsvDownloading(true);
                          downloadTransaction("csv");
                        }}
                      >
                        Export as CSV
                      </a>
                    </Link>
                  )}
                  <CSVLink
                    style={{ display: "none" }}
                    ref={allTransactionRef}
                    headers={TransactionHeaders}
                    data={downloadTransactionData}
                  >
                    Download me
                  </CSVLink>
                </li>
                <li>
                  {xlsxDownloading ? (
                    <Link href="javascript:void(0)">
                      <a className="btn spinnerBtn">
                        <FormSpinner />
                      </a>
                    </Link>
                  ) : (
                    <Link href="javascript:void(0)">
                      <a
                        className="btn"
                        onClick={() => {
                          setXlsxDownloading(true);
                          downloadTransaction("xlsx");
                        }}
                      >
                        Export as xlsx
                      </a>
                    </Link>
                  )}
                </li>
                <li>
                  {" "}
                  {pdfDownloading ? (
                    <Link href="javascript:void(0)">
                      <a className="btn spinnerBtn">
                        <FormSpinner />
                      </a>
                    </Link>
                  ) : (
                    <Link href="javascript:void(0)">
                      <a
                        className="btn"
                        onClick={() => {
                          setPdfDownloading(true);
                          downloadTransaction("pdf");
                        }}
                      >
                        Export as PDF
                      </a>
                    </Link>
                  )}
                </li>
                {/* <li>
                  {downloading ? (
                    <Link href="javascript:void(0)">
                      <a className="btn spinnerBtn">
                        <FormSpinner />
                      </a>
                    </Link>
                  ) : (
                    <Link href="javascript:void(0)">
                      <a className="btn" onClick={() => downloadStock()}>
                        Download All Stock
                      </a>
                    </Link>
                  )}
                  <CSVLink
                    style={{ display: "none" }}
                    ref={allStockRef}
                    // headers={tradeHeaders}
                    data={allStockDownloading}
                  >
                    Download me
                  </CSVLink>
                </li> */}
              </ul>
            </div>
            <ToastContainer
              position="top-center"
              autoClose={5000}
              hideProgressBar={false}
              newestOnTop={false}
              closeOnClick
              rtl={false}
              pauseOnFocusLoss
              draggable
              pauseOnHover
            />
            <div className="table--layout">
              {isLoading ? (
                <FormSpinner />
              ) : (
                <table>
                  <thead>
                    <tr>
                      <th
                        style={{ width: "3rem" }}
                        className="sorting__disabled"
                      >
                        Sr. No
                      </th>
                      <th
                        className={
                          option.accountName == 1
                            ? "desc"
                            : option.accountName == -1
                            ? "asc"
                            : ""
                        }
                        style={{ cursor: "pointer" }}
                        onClick={() => {
                          setOption({
                            accountName: option.accountName == 1 ? -1 : 1,
                          });
                        }}
                      >
                        Account Name
                      </th>
                      <th
                        className={
                          option.accountNumber == 1
                            ? "desc"
                            : option.accountNumber == -1
                            ? "asc"
                            : ""
                        }
                        style={{ cursor: "pointer" }}
                        onClick={() => {
                          setOption({
                            accountNumber: option.accountNumber == 1 ? -1 : 1,
                          });
                        }}
                      >
                        Account Number
                      </th>
                      <th
                        className={
                          option.bankName == 1
                            ? "desc"
                            : option.bankName == -1
                            ? "asc"
                            : ""
                        }
                        style={{ cursor: "pointer" }}
                        onClick={() => {
                          setOption({
                            bankName: option.bankName == 1 ? -1 : 1,
                          });
                        }}
                      >
                        Bank Name
                      </th>
                      <th
                        className={
                          option["user.username"] == 1
                            ? "desc"
                            : option["user.username"] == -1
                            ? "asc"
                            : ""
                        }
                        style={{ cursor: "pointer" }}
                        onClick={() => {
                          setOption({
                            ["user.username"]:
                              option["user.username"] == 1 ? -1 : 1,
                          });
                        }}
                      >
                        Username
                      </th>

                    
                      <th
                        className={
                          option.createdAt == 1
                            ? "desc"
                            : option.createdAt == -1
                            ? "asc"
                            : ""
                        }
                        style={{ cursor: "pointer" }}
                        onClick={() => {
                          setOption({
                            createdAt: option.createdAt == 1 ? -1 : 1,
                          });
                        }}
                      >
                        Created At
                      </th>
                  
                    </tr>
                  </thead>
                  <tbody>
                    {transactionList &&
                      transactionList.length > 0 &&
                      transactionList.map((item, i) => {
                        return (
                          <tr key={i}>
                            <td>{(currentPage - 1) * 10 + i + 1}</td>
                            <td>{item.accountName}</td>
                            <td>{item.accountNumber}</td>
                            <td>{item.bankName}</td>
                            <td>{item.user.username}</td>
                         
                            <td>{moment(item.createdAt).format("L")}</td>
                            {/* <td
                              onClick={() => {
                                setTableAction(!tableAction),
                                  setIsUserToggle(item._id);
                              }}
                              // ref={notificationRef}
                            >
                              <span className="three--vertical--dots">
                                <span></span>
                                <span></span>
                                <span
                                  onClick={() => {
                                    setTableAction(!tableAction),
                                      setIsUserToggle(item._id);
                                  }}
                                ></span>
                              </span>
                              {tableAction && isUserToggle === item._id ? (
                                <span
                                  className="tableActions"
                                  key={isUserToggle}
                                >
                                  <Link href="javascript:void(0)">
                                    <a
                                      className="edit__detail"
                                      onClick={() => {
                                        setEditUserForm(true),
                                          setUserData(item);
                                      }}
                                    >
                                      Edit Holiday
                                    </a>
                                  </Link>
                                  <Link href="javascript:void(0)">
                                    <a
                                      className="delete__lock"
                                      onClick={() => {
                                        confirmDelete(item._id);
                                      }}
                                    >
                                      Delete Holiday
                                    </a>
                                  </Link>
                                </span>
                              ) : (
                                " "
                              )}
                            </td> */}
                          </tr>
                        );
                      })}
                  </tbody>
                </table>
              )}
              <ReactPaginate
                previousLabel={"prev"}
                nextLabel={"next"}
                breakLabel={"..."}
                breakClassName={"break-me"}
                pageCount={totalPage}
                forcePage={currentPage - 1}
                marginPagesDisplayed={2}
                pageRangeDisplayed={5}
                onPageChange={handlePageClick}
                containerClassName={"pagination"}
                subContainerClassName={"pages pagination"}
                activeClassName={"active"}
              />
            </div>
          </div>
        </div>
      </div>
    </>
  );
}
