import Head from "next/head";

import React, { useEffect, useRef, useState } from "react";
import DashboardHeader from "../../components/header/DashboardHeader";

import SideBar from "../../components/side-bar/SideBar";
import { userService } from "../../services";
import { toast, ToastContainer } from "react-toastify";
import moment from "moment";
import FormSpinner from "../../components/Spinners/FormSpinner";
import ReactPaginate from "react-paginate";
import { confirmAlert } from "react-confirm-alert";
import Modal from "react-modal";
import Link from "next/link";
import { CSVLink } from "react-csv";
import ExportExcel from "../../helpers/ExportExcel";
import ExportPdf from "../../helpers/ExportPdf";
import getConfig from "next/config";
import axios from "axios";

export default function AllTransaction() {
  const { publicRuntimeConfig } = getConfig();
  const baseUrl = `${publicRuntimeConfig.apiUrl}`;

  useEffect(() => {
    document.body.classList.remove("has--tabs");
  });

  const [filterAction, setFilterAction] = useState(false);

  const [transactionList, setTransactionList] = useState();

  const [option, setOption] = useState({ createdAt: -1 });
  const [isLoading, setIsLoading] = useState(false);
  const [currentPage, setCurrentPage] = useState(1);
  const [totalPage, setTotalPage] = useState(0);
  const [reason, setReason] = useState("");
  const [error, setError] = useState("");
  const [modelOpened, setModelOpened] = useState(false);
  const [action, setAction] = useState("");
  const [selectId, setSelectId] = useState("");
  const [search, setSearch] = useState("");
  const [csvDownloading, setCsvDownloading] = useState(false);
  const [xlsxDownloading, setXlsxDownloading] = useState(false);
  const [pdfDownloading, setPdfDownloading] = useState(false);
  const allTransactionRef = useRef();
  const [downloadTransactionData, setDownloadTransactionData] = useState([]);
  const TransactionHeaders = [
    {
      label: "Email",
      key: "email",
    },
    { label: "FullName", key: "fullName" },
    { label: "Bank Name", key: "bankName" },
    { label: "Username", key: "username" },
  ];
  useEffect(() => {
    const fetchBetaUsers = async () => {
      try {
    const res  = await axios.get(`${baseUrl}/betaUser`);
    console.log(res.data, '.....')
    setTransactionList(res.data.data);
 
      } catch (error) {

      }
    };

    fetchBetaUsers();
  }, []);
  const getTransaction = (data, page, search) => {
    setIsLoading(true);
    userService
      .getAllRequestTransaction(data, page, search)
      .then((res) => {
        if (res.success) {
          setTransactionList(res.data);
          setTotalPage(res.totalPage);
        }
        setIsLoading(false);
      })
      .catch((err) => {
        setIsLoading(false);
        console.log(err);
      });
  };
  const handelChangeStatus = (e, id) => {
    if (e.target.value == "Process") {
      setAction(e.target.value);
      setSelectId(id);
      updateRequest(e.target.value, id);
    } else {
      setSelectId(id);
      setAction(e.target.value);

      setModelOpened(true);
    }
  };

  const updateRequest = (type, id) => {
    setIsLoading(true);

    userService
      .updateRequestTransaction(type, id, reason)
      .then((res) => {
        toast.success(res.message, {
          position: toast.POSITION.TOP_RIGHT,
        });
        setModelOpened(false);
        getTransaction(option, currentPage);
      })
      .catch((err) => {
        setIsLoading(false);
        setModelOpened(false);

        console.log(err);
      });
  };

  const handlePageClick = ({ selected }) => {
    setCurrentPage(selected + 1);
    getTransaction(option, selected + 1, search);
  };
  const downloadTransaction = async (str) => {
    const { data } = await userService.downloadAllTransaction(search, option);
    setDownloadTransactionData(data);
    if (str == "csv") {
      setTimeout(() => {
        allTransactionRef.current.link.click();
        setCsvDownloading(false);
      }, 1000);
    } else if (str == "xlsx") {
      ExportExcel(TransactionHeaders, data, "transaction");
      setXlsxDownloading(false);
    } else if (str == "pdf") {
      ExportPdf(TransactionHeaders, data, "transaction");
      setPdfDownloading(false);
    }
  };
  return (
    <>
      <Head>
        <title>All Request Transaction</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <SideBar />

      <Modal
        isOpen={modelOpened}
        style={{
          overlay: {
            position: "fixed",
            top: 0,
            left: 0,
            right: 0,
            bottom: 0,
            backgroundColor: "rgb(122 120 120 / 75%)",
          },
          content: {
            position: "absolute",
            top: "0",
            left: "0%",
            right: "0%",
            bottom: "200px",
            background: "#fff",
            overflow: "auto",
            WebkitOverflowScrolling: "touch",
          },
        }}
      >
        <div className="modalHeader">
          <button
            onClick={() => {
              getTransaction(option, currentPage);
              setModelOpened(false);
            }}
          >
            <img src="/images/icons8_delete_1.svg" />
          </button>
        </div>
        <div>
          <h2 style={{ textAlign: "center", margin: "20px 10px" }}>
            <b>Do you want to {action} transaction</b>
          </h2>
          <h2
            style={{ textAlign: "center", margin: "20px 10px", color: "red" }}
          >
            {error}
          </h2>
          <div className="inputBox">
            <textarea
              value={reason}
              placeholder="Please Enter Reason..."
              onChange={(e) => {
                if (e.target.value.length < 50) {
                  setError("");
                  setReason(e.target.value);
                } else {
                  setError("Enter maximum 50 Characters.");
                }
              }}
            />
          </div>
          <div style={{ border: "1px solid #c9cdd1", marginTop: "40px" }}>
            <button
              style={{
                width: "50%",
                borderRight: "0.5px solid #c9cdd1",
                padding: "10px",
              }}
              onClick={() => {
                if (reason != "" && reason.length < 50) {
                  setError("");
                  setReason("");
                  updateRequest(action, selectId);
                } else if (reason == "") {
                  setError("Please Enter Valid Reason.");
                } else {
                  setError("Enter maximum 50 Characters.");
                }
              }}
              className="done"
            >
              Yes
            </button>
            <button
              onClick={() => {
                setError("");
                setReason("");
                setModelOpened(false);
                getTransaction(option, currentPage);
              }}
              style={{
                width: "50%",
                borderRight: "0.5px solid #c9cdd1",
                padding: "10px",
              }}
              className="cancel"
            >
              Cancel
            </button>
          </div>
        </div>
      </Modal>
      <div className="dashboard sideBarOpen">
        <DashboardHeader />
        <div className="contentWrapper">
          <div className="dashboard_content">
            <h1 className="dashboard__title">Beta Users</h1>
            <div className="btnLists manager">
              <ul>
                <li>
                  <form>
                    <input
                      type="text"
                      placeholder="Search ..."
                      onChange={(e) => setSearch(e.target.value)}
                    />
                  </form>
                </li>
                <li>
                  {csvDownloading ? (
                    <Link href="javascript:void(0)">
                      <a className="btn spinnerBtn">
                        <FormSpinner />
                      </a>
                    </Link>
                  ) : (
                    <Link href="javascript:void(0)">
                      <a
                        className="btn"
                        onClick={() => {
                          setCsvDownloading(true);
                          downloadTransaction("csv");
                        }}
                      >
                        Export as CSV
                      </a>
                    </Link>
                  )}
                  <CSVLink
                    style={{ display: "none" }}
                    ref={allTransactionRef}
                    headers={TransactionHeaders}
                    data={downloadTransactionData}
                  >
                    Download me
                  </CSVLink>
                </li>
                <li>
                  {xlsxDownloading ? (
                    <Link href="javascript:void(0)">
                      <a className="btn spinnerBtn">
                        <FormSpinner />
                      </a>
                    </Link>
                  ) : (
                    <Link href="javascript:void(0)">
                      <a
                        className="btn"
                        onClick={() => {
                          setXlsxDownloading(true);
                          downloadTransaction("xlsx");
                        }}
                      >
                        Export as xlsx
                      </a>
                    </Link>
                  )}
                </li>
                <li>
                  {" "}
                  {pdfDownloading ? (
                    <Link href="javascript:void(0)">
                      <a className="btn spinnerBtn">
                        <FormSpinner />
                      </a>
                    </Link>
                  ) : (
                    <Link href="javascript:void(0)">
                      <a
                        className="btn"
                        onClick={() => {
                          setPdfDownloading(true);
                          downloadTransaction("pdf");
                        }}
                      >
                        Export as PDF
                      </a>
                    </Link>
                  )}
                </li>
                {/* <li>
                  {downloading ? (
                    <Link href="javascript:void(0)">
                      <a className="btn spinnerBtn">
                        <FormSpinner />
                      </a>
                    </Link>
                  ) : (
                    <Link href="javascript:void(0)">
                      <a className="btn" onClick={() => downloadStock()}>
                        Download All Stock
                      </a>
                    </Link>
                  )}
                  <CSVLink
                    style={{ display: "none" }}
                    ref={allStockRef}
                    // headers={tradeHeaders}
                    data={allStockDownloading}
                  >
                    Download me
                  </CSVLink>
                </li> */}
              </ul>
            </div>
            <ToastContainer
              position="top-center"
              autoClose={5000}
              hideProgressBar={false}
              newestOnTop={false}
              closeOnClick
              rtl={false}
              pauseOnFocusLoss
              draggable
              pauseOnHover
            />
            <div className="table--layout">
              {isLoading ? (
                <FormSpinner />
              ) : (
                <table>
                  <thead>
                    <tr>
                      <th
                        style={{ width: "3rem" }}
                        className="sorting__disabled"
                      >
                        Sr. No
                      </th>
                      <th
                        className={
                          option.accountName == 1
                            ? "desc"
                            : option.accountName == -1
                            ? "asc"
                            : ""
                        }
                        style={{ cursor: "pointer" }}
                        onClick={() => {
                          setOption({
                            accountName: option.accountName == 1 ? -1 : 1,
                          });
                        }}
                      >
                        Email
                      </th>
                      <th
                        className={
                          option.accountNumber == 1
                            ? "desc"
                            : option.accountNumber == -1
                            ? "asc"
                            : ""
                        }
                        style={{ cursor: "pointer" }}
                        onClick={() => {
                          setOption({
                            accountNumber: option.accountNumber == 1 ? -1 : 1,
                          });
                        }}
                      >
                     FullName
                      </th>
                      <th
                        className={
                          option.bankName == 1
                            ? "desc"
                            : option.bankName == -1
                            ? "asc"
                            : ""
                        }
                        style={{ cursor: "pointer" }}
                        onClick={() => {
                          setOption({
                            bankName: option.bankName == 1 ? -1 : 1,
                          });
                        }}
                      >
                        Gender
                      </th>
                      <th
                        className={
                          option["user.username"] == 1
                            ? "desc"
                            : option["user.username"] == -1
                            ? "asc"
                            : ""
                        }
                        style={{ cursor: "pointer" }}
                        onClick={() => {
                          setOption({
                            ["user.username"]:
                              option["user.username"] == 1 ? -1 : 1,
                          });
                        }}
                      >
                       Phone Number
                      </th>

                    
                      <th
                        className={
                          option.status == 1
                            ? "desc"
                            : option.status == -1
                            ? "asc"
                            : ""
                        }
                        style={{ cursor: "pointer" }}
                        onClick={() => {
                          setOption({
                            status: option.status == 1 ? -1 : 1,
                          });
                        }}
                      >
                        Status
                      </th>
                   
                  
                    </tr>
                  </thead>
                  <tbody>
                    {transactionList &&
                      transactionList.length > 0 &&
                      transactionList.map((item, i) => {
                        return (
                          <tr key={i}>
                            <td>{(currentPage - 1) * 10 + i + 1}</td>
                            <td>{item.email}</td>
                            <td>{item.fullName}</td>
                            <td>{item.gender}</td>
                            <td>{item.phoneNumber}</td>
                            <td>{item?.participateInBetaTesting
}</td>
                           
                      
              
                          </tr>
                        );
                      })}
                  </tbody>
                </table>
              )}
              <ReactPaginate
                previousLabel={"prev"}
                nextLabel={"next"}
                breakLabel={"..."}
                breakClassName={"break-me"}
                pageCount={totalPage}
                forcePage={currentPage - 1}
                marginPagesDisplayed={2}
                pageRangeDisplayed={5}
                onPageChange={handlePageClick}
                containerClassName={"pagination"}
                subContainerClassName={"pages pagination"}
                activeClassName={"active"}
              />
            </div>
          </div>
        </div>
      </div>
    </>
  );
}
