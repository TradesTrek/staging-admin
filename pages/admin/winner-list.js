import Head from "next/head";
import Image from "next/image";
import Link from "next/link";
import React, { useEffect, useState } from "react";
import DashboardHeader from "../../components/header/DashboardHeader";

import SideBar from "../../components/side-bar/SideBar";
import { userService } from "../../services";
import { confirmAlert } from "react-confirm-alert";
import { toast } from "react-toastify";
import AddSubscription from "../../components/subscription/AddSubscription";
import EditSubscription from "../../components/subscription/EditSubscription";
import { subscriptionService } from "../../services/subscription.service";
import { useRouter } from "next/router";
import { gameService } from "../../services/game.service";
import IncreaseDecrease from "../../components/IncreaseDecrease/IncreaseDecrease";
import ReactPaginate from "react-paginate";

export default function WinnerRank() {
  useEffect(() => {
    document.body.classList.remove("has--tabs");
  });

  const [holiday, setHoliday] = useState();
  const [page, setPage] = useState(1);
  const [allPage, setAllPage] = useState(1);
  const [month, setMonth] = useState([]);
  const [date, setDate] = useState(new Date());
  const [myGame, setMyGame] = useState();
  const [id,setId]=useState('')

  const router = useRouter();
  const findMonth = (data) => {
    let startDate = new Date(data?.startDate);
    let today = new Date();
    let temp = new Date(data?.startDate);
    temp.setMonth(today.getMonth());
    temp.setFullYear(today.getFullYear());
    setDate(temp);
    let months = [];
    while (startDate <= today) {
      let month = startDate.toLocaleString(undefined, { month: "long" });
      let year = startDate.getFullYear();
      let obj = {
        level: `${month} (${year})`,
        date: new Date(startDate),
      };
      months.push(obj);
      startDate.setMonth(startDate.getMonth() + 1);
    }
    setMonth(months);
  };
  //   useEffect(() => {
  //           if(router?.query?.gameId){
  //                     GetSingleGame(router?.query?.gameId);
  //           }

  //   }, [router]);

  const GetSingleGame = (gameId) => {
    gameService
      .getSingleGame(gameId)
      .then((res) => {
        if (res.success) {
          setMyGame(res.game);
          findMonth(res.game);
        }
      })
      .catch((err) => console.log(err));
  };
  const GetWinner = (gameId, date) => {
    // setLoading(true)
    gameService
      .getWinner(gameId, date)
      .then((res) => {
        if (res.success) {
          setHoliday(res.top);
        } else {
          setHoliday([]);
        }
        //     setLoading(false)
      })
      .catch((err) => console.log(err));
  };
  useEffect(() => {
    if (router?.query?.gameId) {
      GetSingleGame(router?.query?.gameId);
      setId(router?.query?.gameId)

    }
  }, [ router]);
  useEffect(()=>{
    if(id){
      GetWinner(id, date)   

    }
  },[id,date])
  
  const handlePageClick = ({ selected }) => {
  
    setPage(selected + 1);
  };

  return (
    <>
      <Head>
        <title>Subscription Lists</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <SideBar />
      <div className="dashboard sideBarOpen">
        <DashboardHeader />
        <div className="contentWrapper">
          
          <div className="dashboard_content">
          <div
          style={{
            display: "flex",
            justifyContent: "flex-end",
          }}
        >
          <select
            onChange={(e) => setDate(e.target.value)}
            style={{ padding: "10px 20px", margin: "20px 10px" }}
            value={date}
          >
            {month?.map((item, index) => (
              <option
          
                value={item?.date}
                key={index}
              >
                {item.level}
              </option>
            ))}
          </select>
        </div>
            <div className="table--layout">
              <table>
                <thead>
                  <tr>
                    <th style={{ width: "3rem" }} className="sorting__disabled">
                      Rank
                    </th>
                    <th className="desc sorting__disabled">Username</th>
                 
                    <th className="asc desc sorting__disabled">
                      Account Value
                    </th>
                    <th className="asc desc sorting__disabled">
                      Today’s Change
                    </th>

                    <th className="asc desc sorting__disabled">
                      Overall Change
                    </th>
                  </tr>
                </thead>
                <tbody>
                  {holiday &&
                    holiday.length > 0 &&
                    holiday.map((item, i) => {
                      return (
                        <tr key={i}>
                          <td>{item?.rank}</td>
                          <td>
                            {item?.userId?.username || ""}
                            
                          </td>
                         
                          <td>
                            ₦{" "}
                            {item?.accountValue
                              ?.toFixed(2)
                              ?.toString()
                              .replace(/\B(?=(\d{3})+(?!\d))/g, ",")}
                          </td>
                          {IncreaseDecrease(
                            item?.profitOrLossToday,
                            (item?.profitOrLossToday * 100) / item?.accountValue
                          )}

                          {IncreaseDecrease(
                            item?.annualReturn,
                            (item?.annualReturn * 100) / item?.accountValue
                          )}
                        </tr>
                      );
                    })}
                </tbody>
              </table>
              <ReactPaginate
                previousLabel={"prev"}
                nextLabel={"next"}
                breakLabel={"..."}
                breakClassName={"break-me"}
                pageCount={allPage}
                //         pageCount={Math.ceil(users?.total / users?.limit)}
                marginPagesDisplayed={2}
                pageRangeDisplayed={5}
                onPageChange={handlePageClick}
                containerClassName={"pagination"}
                subContainerClassName={"pages pagination"}
                activeClassName={"active"}
              />
            </div>
          </div>
        </div>
      </div>
    </>
  );
}
