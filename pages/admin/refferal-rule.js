import React, { Fragment, useEffect, useState } from "react";
import DashboardHeader from "../../components/header/DashboardHeader";
import SideBar from "../../components/side-bar/SideBar";
import Head from "next/head";
import { gameService } from "../../services/game.service";
import FormSpinner from "../../components/Spinners/FormSpinner";
import { toast, ToastContainer } from "react-toastify";

export default function RefferalRule() {
  const [per, setPer] = useState(0);
  const [isLoading, setIsLoading] = useState(false);
  const [isError,setIsError]=useState('')

  useEffect(() => {
    GetAllRefferalRule();
  }, []);

  const GetAllRefferalRule = () => {
    setIsLoading(true);
    gameService
      .GetRefferalRule()
      .then((res) => {
        if (res.success) {
          setPer(res.data.per);
          setIsLoading(false);
        
        }
      })
      .catch((err) => {
        console.log("err", err);
        setIsLoading(false);
      });
  };

  const AddRefferalRule = (data) => {
    setIsLoading(true);
    gameService
      .AddRefferalRule(data)
      .then((res) => {
        if (res.success) {
          setPer(res.data.per);
          setIsLoading(false);
          toast.success(res.message, {
            position: toast.POSITION.TOP_RIGHT,
          });
        }
      })
      .catch((err) => {
        console.log("err", err);
        setIsLoading(false);
      });
  };

  const handleSubmit = () => {
    if (per <= 0) {
      return setIsError('Please Enter Valid Number');
    }
    setIsError('')
    AddRefferalRule(per);
  };
  return (
    <>
      <Head>
        <title>Refferal Rule</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Fragment>
        <SideBar />
        <div className="dashboard sideBarOpen">
          <DashboardHeader />
          <ToastContainer
        position="top-center"
        autoClose={5000}
        hideProgressBar={false}
        newestOnTop={false}
        closeOnClick
        rtl={false}
        pauseOnFocusLoss
        draggable
        pauseOnHover
      />
          <div className="contentWrapper">
            <div className="dashboard_content">
            <h1 className="dashboard__title">Refferal Rule</h1>
              <div className="center--block Referral">
                <div className="small--block">
                  <div className="flexBox amtTitle block--title block--back--link mb--32">
                    <h1 className="font-20 textLeft">Referral</h1>
                    {/* <h4 className="">â‚¦ {user?.user?.walletAmount?.toFixed(2)||0.00}</h4> */}
                  </div>

                  <div className="referEarn">
                    <div className="icon">
                      <img src="/images/reficon.svg" alt="Refer Icon" />
                    </div>

                    <div className="site--form">
                      <div className="form--item referalCode">
                        <label for="" className="form--label">
                          Reffer Per (%)

                          {isError?<p style={{fontSize:'10px',color:'red'}}>{isError}</p>:""}
                        </label>
                        <input
                          type="number"
                          placeholder="Enter Per"
                          className="form--control"
                          onChange={(e) => setPer(e.target.value)}
                          value={per}
                        />
                        {/* <button
                  onClick={() => setShow(!show)}
                  type="button"
                  className="btn btn--orange"
                > */}

                        {/* {show?"HIDE":"SHOW"} */}
                        {/* </button> */}
                      </div>

                      <button
                        onClick={() => handleSubmit()}
                        className="btn shareBtn"
                        disabled={isLoading}
                      >
                        {isLoading ? <FormSpinner /> : "SAVE"}
                      </button>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </Fragment>
    </>
  );
}
